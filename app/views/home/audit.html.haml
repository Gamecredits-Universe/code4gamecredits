- cache_time = 1.minute
- cache("audit-#{Time.now.to_i / cache_time}") do
  %h1 Audit
  %p
    Some cells may take up to #{distance_of_time_in_words eval CONFIG['tipper_delay']} to be updated.

  - projects = Project.order(disabled: :asc, account_balance: :desc).includes(:cold_storage_transfers, :distributions, :tips, :deposits)
  - with_btc_human_defaults(precision: 0, display_currency: false) do
    %p
      %table.table
        - projects.each_slice(15) do |project_slice|
          %thead
            %tr
              %th Project
              %th Address
              %th.money
                %abbr{title: "Total amount that was donated to the project."} Donated
              %th.money
                %abbr{title: "#{CONFIG["our_fee"]*100}% Code4gamecredits maintenance fee, used to pay maintenance, hosting and transaction fees."} Code4gamecredits Fee
              %th.money
                %abbr{title: "The balance displayed on the website. The tip amounts are based on this value. This balance includes tips refunded to the project."} Available balance
              %th.money
                %abbr{title: "Tips attributed but not sent because they have not been processed yet or because the author did not set an address."} Tips not sent
              %th.money
                %abbr{title: "Transaction fee paid when tips are sent."} Transaction fee
              %th.money
                %abbr{title: "Amount currently in cold storage (see below)."} Amount in cold storage
              %th.money
                %abbr{title: "Available balance + tips not sent - amount in cold storage + fee - transaction fee."} Expected account balance
              %th.money
                %abbr{title: "The balance of the project account as reported by the Gamecredits daemon."} Account balance
              %th.money
                %abbr{title: "If it is different than 0 there is an issue."} Difference
          %tbody
            - project_slice.each do |project|
              %tr{class: project.disabled ? "text-muted" : nil}
                %td
                  %strong= link_to project.name, project
                %td
                  - address_explorers.each_with_index do |explorer, i|
                    = link_to "[#{i + 1}]", address_url(project.bitcoin_address, explorer)
                %td.money= btc_human(donated   = project.deposits.map(&:amount).sum)
                %td.money= btc_human(fee       = donated - project.deposits.map(&:available_amount).sum)
                %td.money= btc_human(available = project.available_amount_cache)
                %td.money= btc_human(unpaid    = project.tips.select(&:unpaid?).map(&:amount).compact.sum)
                %td.money= btc_human(txfee     = project.paid_fee, precision: 2)
                %td.money= btc_human(cold      = project.cold_storage_amount)
                %td.money= btc_human(expected  = available + unpaid - cold + fee - txfee) if available and unpaid and cold and fee and txfee
                %td.money= btc_human(account   = project.account_balance)
                %td.money= btc_human(account - expected, precision: 2) if account and expected
        %tbody
          %tr
            %th{colspan: 2} Total
            %td.money= btc_human(donated   = projects.map(&:deposits).flatten.map(&:amount).sum)
            %td.money= btc_human(fee       = donated - projects.map(&:deposits).flatten.map(&:available_amount).sum)
            %td.money= btc_human(available = projects.map(&:available_amount_cache).compact.sum)
            %td.money= btc_human(unpaid    = projects.map(&:tips).flatten.select(&:unpaid?).map(&:amount).compact.sum)
            %td.money= btc_human(txfee     = projects.map(&:paid_fee).compact.sum, precision: 2)
            %td.money= btc_human(cold      = projects.map(&:cold_storage_amount).compact.sum)
            %td.money= btc_human(expected  = available + unpaid - cold + fee - txfee) if available and unpaid and cold and fee and txfee
            %td.money= btc_human(account   = projects.map(&:account_balance).compact.sum)
            %td.money= btc_human(account - expected, precision: 2) if account and expected

    %h2 Cold storage
    %p
      %table.table
        %thead
          %tr
            %th Address
            %th Explorers
        %tbody
          - (CONFIG["cold_storage"].try(:[], "addresses") || []).each do |address|
            %tr
              %td= address
              %td
                - address_explorers.each_with_index do |explorer, i|
                  = link_to "[#{i + 1}]", address_url(address, explorer)
